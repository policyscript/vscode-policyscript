---
title: `Demo 1 - Example of PolicyScript`
---

# Welcome to the PolicyScript demo. Everything proceeded by a `#` is a comment,
# and will not appear on the published document (except for comments inside of
# blocks, but we will get to that later). Comments should be capitalized, and
# should end with a period if it is a sentence.

# First, let's take a look at the available block initializers:
# - @meta
# - @define
# - @enum
# - @inputs
# - @outputs
# - @locals
# - @code

# `@meta` is used to define any additional attributes that should be attached to
# this file. These are not shown in the published document, but could be useful
# for publishing the document to the web, or for including keywords for
# improving search.
@meta {
  set short to `Section 121. Exclusion of gain from sale of principal residence`
  set path  to `121`

  # Just to demonstrate all the type, here they all are as meta fields.
  set text      to `Text example`
  set date      to |2021/01/15|
  set time      to |23:59:59|
  set period    to 4 days
  set condition to true
  set integer   to 50_000_000
  set decimal   to 24.48
  set percent   to 55%
  set money     to $40.00
  set text_list to {
    `list item 1`
    `list item 2`
  }
}

# You can also create `@enum` to group a set of possibilities together. Here we
# can see that the Age enum is either `young` or `old`.
@enum Age {
  - young
  - old
}

# You can use `@define` to define local structures which contain fields.
@define Person {
  
  # You can also add comments inside of blocks. These will be shown in the
  # published document, so they should include helpful descriptions of the code.
  
  # Here, we see `is_alive` is a built-in type (`condition`) whereas `age` is
  # a type we have defined ourselves above. Types will be discussed in more
  # detail at the bottom of the document, so look at those to see all available
  # built-in types.
  is_alive: condition

  # Types we define ourselves are capitalized, whereas built-in types are lower-
  # case.
  age: Age

  # This is a list of all the countries this person has lived in.
  countries_lived_in: text list
}

# `@inputs` defines the input values for this section of policy. In this example
# we simply receive a person.
@inputs {
  person: Person
}

# `@outputs` defines any values that we return. These values are set by the
# policy code, and are determined based on the inputs and the internal code.
@outputs {
  can_read: condition
}

# Any value that contains a number can have that number arbitrarily divided with
# underscores (this will not effect the code). This applies to `integer`,
# `decimal`, `period` and `money`, and is for clarity when viewing large
# numbers. For example:
# - `$5_000_000.00` is the same as `$5000000.00`.
# - `70_000 days` is the same as `70000 days`.

_ (a) Ability to read

# As you can see, sections are denoted by `- ` followed by anything you want.
# For example, this could have been `- a. Ability to read`, the actual text does
# not matter. To allow indentation, simply add more `- ` together (we will see
# this later).

If a person has lived in Canada, they are able to read.

@locals {
  has_lived_in_canada: condition
}

@code {
  # We initialize the value to false.
  set has_lived_in_canada to false

  # `for <custom_name> in <list>` will go through every item in the list one by
  # one and then store that item in `custom_name` (in this case `country`).
  for country in person.countries_lived_in:

    # We check if `country` is equal to `Canada`, and if so we set
    # `has_lived_in_canada` to true.
    if country = `Canada`:
      set has_lived_in_canada to true
  
  # Now we can set the value of `can_read` to the value of `has_lived_in_canada`
  # since if `has_lived_in_canada` is true, so is `can_read`.
  set can_read to has_lived_in_canada
}

_ _ (I) Exceptions

# Since exceptions is indented by 2, it will be within (a).

However, if a person is young, they are unable to read.

@code {
  if person.age = Age.young:
    set can_read to false
}

# That's it for the legal code! The document is processed top to bottom, so
# lower rules will take precidence over higher ones.

# I mentioned earlier that there are built-in types. Here are all of them.
@define AllTypes {
  # Texts are simply sentences, names, IDs or anything else that would be in
  # text form. They use the backtick (`) rather than quotation marks to ensure
  # that inner quotation marks do not need to be escaped. For example:
  # `That's what he said: "hello"`.
  text_value: text

  # Dates represent a year, month, and day. They are in the form |yyyy/mm/dd|.
  date_value: date

  # Times represents a 24-hour time specific to seconds in the form |hh:mm:ss|.
  time_value: time

  # Periods are a range of time. This can be specified as an integer followed by
  # `year` or `years` (example: `3 years`).
  # `month` or `months` (example: `2 months`).
  # `day` or `days` (example: `1 day`).
  period_value: period

  # Conditions are either true or false.
  condition_value: condition

  # Integers are numbers without decimal points.
  integer_value: integer

  # Decimals are numbers with decimal points. TODO: specificity.
  decimal_value: decimal

  # Money is like decimal, but rounded to 2 decimal places. This is represented
  # as a dollar sign followed by a number (example: `$5.25`).
  money_value: money

  # In addition to these types, you can specify your own types using `@define`
  # or `@enum`. Also, you can have lists of any of the types above, or of any
  # custom types.
  list_of_times: text list
}